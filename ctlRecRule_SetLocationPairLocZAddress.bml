//************************************************************************************************************
//** Rule Name....: ctlRecRule_SetLocationPairLocZAddress                                                   **
//** Rule Type....: Recommendation Rule                                                                     **
//**                                                                                                        **
//** Parameters...: ctlLocationPairLocZHTML   (Set)                                                         **
//**                ctlLocationPairLocZString (Function)                                                    **
//**                                                                                                        **
//** Description..: This code snippet reads the selected SFDC Locations on the Opportunity and  builds a    **
//**                string that gets interpreted by a JavaScript function to render an HTML drop down       **
//**                with list of all the available addresses.   As this is HTML the actual user selection   **
//**                cannot be populated to the real BM attributes without the help of javascript            **
//**                We need javascript in conjunction to the below code so that the functionality works     **
//**                correctly.  Javascript is present in config.js file (latest version, as it is versioned **
//**                by date) under the function assignZLocation()                                           **
//**                                                                                                        **
//**                                                                                                        **
//** History......: Date        Author      Comment                                                         **
//**                08/26/13    Wim H.      Initial Implementation & upd                                    **
//**                                                                                                        **
//************************************************************************************************************

//
// Initialize all the variables with context-specific ones
//
htmlSelectID    = "nameLocPairLocationZ";	// Sets the name space for the HTML select control
showNoneSel	= true;				// Set showNoneSel to true if you want to show a none-selected option, otherwise false
selectNoneLabel = "Select Z Location...";	// Populate this value with the None-Selected Text


// ADD MORE COMMENTS HERE EXPLAINING HOW TO USE and RE-USE
// Dummy options provided below for testing purposes
// Example:     <select id='nameLocationZ'>
//                    <option id="address1" value="Select!$!TECH_DESC!$!COUNTRY!$!NAME">Select</option>
//                    <option id="address2" value="AAAAAA!$!TECH_DESC!$!COUNTRY!$!NAME">AAAAAA</option>
//                    <option id="address3" value="BBBBBB!$!TECH_DESC!$!COUNTRY!$!NAME">BBBBBB</option>
//                    <option id="address4" value="CCCCCC!$!TECH_DESC!$!COUNTRY!$!NAME">CCCCCC</option>
//                    <option id="address5" value="DDDDDD!$!TECH_DESC!$!COUNTRY!$!NAME">DDDDDD</option>
//                    <option id="address6" value="EEEEEE!$!TECH_DESC!$!COUNTRY!$!NAME">EEEEEE</option>
//                </select>
// html = html + "<option id=\"address" + string(index) + "\" value=\"" + allOptions + "\">" + address + "</option>";
// End Dummy Options

//
// Keep the code below this comment as generic as possible.   All the context-specific variables are provide above
//

// Start encoding the html select String as well as the options string   
htmlBaseVal 	= "<select id='" + htmlSelectID + "'>";
index		= 0;
//
// If a None Value was declared in the context-specific section above, then render this as the first option 
//
options     = "";
if (showNoneSel) {

    valueParams = "none" + "!$!" + "none"; 
    options 	= options + "<option id=\"" + htmlSelectID + string(index) + "\" value=\"" + valueParams + "\">" + selectNoneLabel + "</option>";
    index 	= index + 1;
}

//
// Step through all the SFDC Locations Passed in and build the options string
//
serviceLocationsFound = false;
for row in ctlServiceLocationAddressArrAtt {

    if (row == "") {
        break;
    }

    // Build the Value Parameters string.   These value parameters will be populate the real Attributes in the JavaScript:
    // Format: "value1!$!value2"
    
    valueParams 		= ctlServiceLocationIDArrAtt[index] + "!$!" + row; 
    options 			= options + "<option id=\"" + htmlSelectID + string(index) + "\" value=\"" + valueParams + "\">" + row + "</option>";
    index 			= index + 1;
    serviceLocationsFound 	= true;
}
htmlBaseVal = htmlBaseVal + options + "</select>";


//retValue = String[1];
//index = 0;
//rowRange =  range(ctlNumberOfLocationPairs);
//for row in rowRange {
// retValue[index] = baseValue;
// retValue[index] =  "!$!SELECT_BEGIN!$! id=\"plsALocationHTMLArrAtt" + string(index) + "\">" +  baseValue;
// index  = index + 1;
//}


//
// Show a recommendation message until the user selects a Z Location.   
// If no locations where found then report an error. 
//
recMessageStart    	= "<p class=\"message recommendation-message\">";
recMessageEnd	   	= "</p>";
constraintMsgStart 	= "<p class=\"message constraint-message\">";
constraintMsgEnd	= "</p>";

message = "";
if (not serviceLocationsFound) {
    message = constraintMsgStart + "*** NO SFDC LOCATIONS ASSOCIATED ***" + constraintMsgEnd;
}
elif (ctlLocationPairLocZSFDCIDString == "") {
    message = recMessageStart + "Please select Z Location..." + recMessageEnd;
}
retValue = htmlBaseVal + message;
return retValue;